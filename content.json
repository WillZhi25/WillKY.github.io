[{"title":"mongodb 使用","date":"2021-05-08T14:37:46.000Z","path":"2021/05/08/Mongodb 初使用/","text":"前言目前已经有部份业务开始使用mongodb 作为存储方式，为了方便大家后续使用故此写下一些经验总结. 一、maven 导入123456&lt;!-- mongodb start --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- mongodb end --&gt; 二、配置1234spring: data: mongodb: uri: mongodb://192.168.1.29:27017/pp_data 三、代码示例1、Bean 类注入 12@Autowiredprivate MongoTemplate mongoTemplate; 新增 1mongoTemplate.insert(entity); 更新或新增 123456789// 条件Query query = new Query();query.addCriteria(Criteria.where(&quot;userId&quot;).is(item.getUserId()));query.addCriteria(Criteria.where(&quot;date&quot;).is(date));// 需要更新或者插入的数据Update update = new Update();update.set(&quot;sysUpdateTime&quot;, TimeUtils.getCurrentTimeOfMilli());// 执行mongoTemplate.upsert(query, update, BuyerTagsEntity.class); 更新一条记录/多条记录 12345678910111213141516String date = TimeUtil.getDate(0);// 条件组装Query query = new Query();query.addCriteria(Criteria.where(&quot;userId&quot;).is(userId));query.addCriteria(Criteria.where(&quot;ymd&quot;).is(Integer.parseInt(date)));Update update = new Update();// 对list 批量更新Update.PushOperatorBuilder pushOperatorBuilder = update.push(&quot;goodsIdList&quot;);pushOperatorBuilder.each(goodsIdList.toArray(new Long[0]));// 更新某个字段update.set(&quot;sysUpdateTime&quot;, TimeUtils.getCurrentTimeOfMilli());// 只更新一条mongoTemplate.updateFirst(query, update, AiRecGoodsDistanceRecordEntity.class);// 更新多条mongoTemplate.updateMulti(query, update, AiRecGoodsDistanceRecordEntity.class); 删除 1234Query query = new Query();query.addCriteria(Criteria.where(&quot;date&quot;).is(date));mongoTemplate.remove(query, BuyerTagsEntity.class); 对list 字段内容进行删除 1234567891011String date = TimeUtil.getDate(0);Query query = new Query();query.addCriteria(Criteria.where(&quot;userId&quot;).is(userId));query.addCriteria(Criteria.where(&quot;ymd&quot;).is(Integer.parseInt(date)));Update update = new Update() // 要删除的数据 .pullAll(&quot;goodsIdList&quot;, goodsIdList.toArray(new Long[0])) .set(&quot;sysUpdateTime&quot;, TimeUtils.getCurrentTimeOfMilli());mongoTemplate.updateFirst(query, update, AiRecGoodsDistanceRecordEntity.class); 7.对单个嵌套文档进行更新（注：这种写法只会更新嵌套文档的第一个。建议用8） 1234567891011121314151617181920// 查询条件Query query = new Query();query.addCriteria( Criteria.where(&quot;userId&quot;).is(userId) .and(&quot;storeId&quot;).is(storeId) // 嵌套文档查询条件 .and(&quot;goodsInfoList.status&quot;).is(beforeStatus) .and(&quot;goodsInfoList.txId&quot;).is(beforeTxId) .and(&quot;goodsInfoList.branchId&quot;).is(beforeBranchId) .and(&quot;goodsInfoList.goodsId&quot;).is(goodsId));CartInfoEntity one = mongoTemplate.findOne(query, CartInfoEntity.class);// 更新内容Update update = new Update() // 所有内嵌文档更新 .set(&quot;goodsInfoList.$.txId&quot;, txId) .set(&quot;goodsInfoList.$.branchId&quot;, branchId) .set(&quot;goodsInfoList.$.status&quot;, afterStatus) .set(&quot;sysUpdateTime&quot;, TimeUtils.getCurrentTimeOfMilli());UpdateResult updateResult = mongoTemplate.updateMulti(query, update, CartInfoEntity.class); 8.对多个嵌套文档并过滤进行更新 12345678910111213141516171819202122232425262728// 查询条件Bson filtersBson = Filters.and( Filters.eq(&quot;userId&quot;, cartGoodsDeleteQuery.getUserId()), // 嵌套文档的字段写法 Filters.eq(&quot;goodsInfoList.status&quot;, CartGoodsInfoStatusEnums.NORMAL.getCode()), Filters.eq(&quot;goodsInfoList.txId&quot;, 0L), Filters.eq(&quot;goodsInfoList.branchId&quot;, 0L), Filters.in(&quot;goodsInfoList.goodsId&quot;, cartGoodsDeleteQuery.getGoodsIds()));// 更新内容Bson updatesBsonList = Updates.combine( // 内嵌文档循环别名 “e” Updates.set(&quot;goodsInfoList.$[e].txId&quot;, cartGoodsDeleteQuery.getTxId()), Updates.set(&quot;goodsInfoList.$[e].branchId&quot;, cartGoodsDeleteQuery.getBranchId()), Updates.set(&quot;goodsInfoList.$[e].status&quot;, cartGoodsDeleteQuery.getChangeStatus()), Updates.set(&quot;sysUpdateTime&quot;, TimeUtils.getCurrentTimeOfMilli()));// 相当于where条件，goodsId在这个列表内才更新UpdateOptions arrayFiltersBsonList = new UpdateOptions().arrayFilters( Collections.singletonList( // 存在该goodsId的内嵌文档才进行更新 Filters.in(&quot;e.goodsId&quot;, cartGoodsDeleteQuery.getGoodsIds()) ));// 更新多个UpdateResult updateResult = getCollectionDocument().updateMany(filtersBson, updatesBsonList, arrayFiltersBsonList); 四、索引12345678910111213141516171819202122232425262728293031323334@Data@Document(collection = MongodbConstant.COLLECTION_TAGS_BUYER_TAGS)@CompoundIndexes(&#123; @CompoundIndex(name = &quot;idx_user_date&quot;, def = &quot;&#123;&apos;userId&apos;: -1, &apos;date&apos;: -1&#125;&quot;)// 联合索引 // @CompoundIndex(name = &quot;idx_user&quot;, def = &quot;&#123;&apos;userId&apos;: -1&#125;&quot;, unique = true)// 唯一索引&#125;)public class BuyerTagsEntity implements Serializable &#123; private static final long serialVersionUID = 4186877053555563977L; @Id private String id; /** * 用户id */ @Indexed(name = &quot;idx_user_id&quot;, unique = true) // 唯一索引 private Long userId; /** * 时间 */ @Indexed(name = &quot;idx_date&quot;) // 单字段索引 private String date; /** * 标签 */ private List&lt;String&gt; tags; /** * 更新时间 */ private Long sysUpdateTime;&#125;","tags":[{"name":"spring boot","slug":"spring-boot","permalink":"https://willky.github.io/tags/spring-boot/"},{"name":"mvn","slug":"mvn","permalink":"https://willky.github.io/tags/mvn/"},{"name":"mongodb","slug":"mongodb","permalink":"https://willky.github.io/tags/mongodb/"}]},{"title":"ES 修改 max_result_window","date":"2021-02-05T01:23:19.000Z","path":"2021/02/05/ES 修改 max_result_window/","text":"一、 问题默认情况下，当查询条数超出10000时，es 就会报错 1Result window is too large, from + size must be less than or equal to: [10000] but was xx 二、解决方案执行123456PUT index_name/_settings&#123; &quot;index&quot;:&#123; &quot;max_result_window&quot;:1000000 &#125;&#125; 成功后返回123&#123; &quot;acknowledged&quot; : true&#125;","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://willky.github.io/tags/elasticsearch/"},{"name":"max_result_window","slug":"max-result-window","permalink":"https://willky.github.io/tags/max-result-window/"}]},{"title":"SpringBoot 集成Hbase 报错","date":"2020-12-08T14:37:46.000Z","path":"2020/12/08/SpringBoot集成Hbase报错/","text":"集成的hbase-client版本号为1.2.3时，会报以下错误: 1org.apache.hadoop.hbase.DoNotRetryIOException: java.lang.IllegalAccessError: tried to access method com.google.common.base.Stopwatch.&lt;init&gt;()V from class org.apache.hadoop.hbase.zookeeper.MetaTableLocator 可以通过升级版本解决, 最终采用1.3.0版本解决 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.hbase&lt;/groupId&gt; &lt;artifactId&gt;hbase-client&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt; &lt;/dependency&gt;","tags":[{"name":"spring boot","slug":"spring-boot","permalink":"https://willky.github.io/tags/spring-boot/"},{"name":"hbase","slug":"hbase","permalink":"https://willky.github.io/tags/hbase/"},{"name":"mvn","slug":"mvn","permalink":"https://willky.github.io/tags/mvn/"}]},{"title":"ES常用聚合查询","date":"2020-12-05T11:13:59.000Z","path":"2020/12/05/ES常用聚合查询/","text":"一、 问题在数据库查询中，我们经常使用到一些统计查询如count、sum， 以及有时候会使用到group by 查询， 那么在elastic search 中如果去实现这些功能呢？下面来带大家看一下 二、aggs的使用","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://willky.github.io/tags/elasticsearch/"},{"name":"es","slug":"es","permalink":"https://willky.github.io/tags/es/"},{"name":"group by","slug":"group-by","permalink":"https://willky.github.io/tags/group-by/"},{"name":"sum","slug":"sum","permalink":"https://willky.github.io/tags/sum/"},{"name":"聚合查询","slug":"聚合查询","permalink":"https://willky.github.io/tags/聚合查询/"}]},{"title":"ES查看分数及进行修改","date":"2020-08-05T08:13:59.000Z","path":"2020/08/05/ES查看分数及进行修改/","text":"一、查看分数组成通过修改dsl 可以查看到文档的最终得分以及计算方法，如下: 123456789GET test_index/_search&#123; \"explain\": true, // 添加explain 可以文档结果中看到分数的计算过程 \"query\": &#123; \"match\": &#123; \"description\": \"测试\" &#125; &#125;&#125; 查询得到以下结果: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177&#123; \"_shard\":\"xxxx\", \"_node\":\"Bxi8bvjXR3GFO2NdCsGmXQ\", \"_index\":\"xxxx\", \"_type\":\"_doc\", \"_id\":\"3802\", \"_score\":7.1130733, \"_source\":&#123; \"goods_id\":3802 &#125;, \"_explanation\":&#123; \"value\":7.1130733, \"description\":\"sum of:\", \"details\":[ &#123; \"value\":3.549871, \"description\":\"weight(description:测 in 325) [PerFieldSimilarity], result of:\", \"details\":[ &#123; \"value\":3.549871, \"description\":\"score(freq=10.0), product of:\", \"details\":[ &#123; \"value\":2.2, \"description\":\"boost\", \"details\":[ ] &#125;, &#123; \"value\":2.4871316, \"description\":\"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:\", \"details\":[ &#123; \"value\":860, \"description\":\"n, number of documents containing term\", \"details\":[ ] &#125;, &#123; \"value\":10348, \"description\":\"N, total number of documents with field\", \"details\":[ ] &#125; ] &#125;, &#123; \"value\":0.6487705, \"description\":\"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", \"details\":[ &#123; \"value\":10, \"description\":\"freq, occurrences of term within document\", \"details\":[ ] &#125;, &#123; \"value\":1.2, \"description\":\"k1, term saturation parameter\", \"details\":[ ] &#125;, &#123; \"value\":0.75, \"description\":\"b, length normalization parameter\", \"details\":[ ] &#125;, &#123; \"value\":25, \"description\":\"dl, length of field\", \"details\":[ ] &#125;, &#123; \"value\":4.399884, \"description\":\"avgdl, average length of field\", \"details\":[ ] &#125; ] &#125; ] &#125; ] &#125;, &#123; \"value\":3.5632021, \"description\":\"weight(description:试 in 325) [PerFieldSimilarity], result of:\", \"details\":[ &#123; \"value\":3.5632021, \"description\":\"score(freq=10.0), product of:\", \"details\":[ &#123; \"value\":2.2, \"description\":\"boost\", \"details\":[ ] &#125;, &#123; \"value\":2.496472, \"description\":\"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:\", \"details\":[ &#123; \"value\":852, \"description\":\"n, number of documents containing term\", \"details\":[ ] &#125;, &#123; \"value\":10348, \"description\":\"N, total number of documents with field\", \"details\":[ ] &#125; ] &#125;, &#123; \"value\":0.6487705, \"description\":\"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", \"details\":[ &#123; \"value\":10, \"description\":\"freq, occurrences of term within document\", \"details\":[ ] &#125;, &#123; \"value\":1.2, \"description\":\"k1, term saturation parameter\", \"details\":[ ] &#125;, &#123; \"value\":0.75, \"description\":\"b, length normalization parameter\", \"details\":[ ] &#125;, &#123; \"value\":25, \"description\":\"dl, length of field\", \"details\":[ ] &#125;, &#123; \"value\":4.399884, \"description\":\"avgdl, average length of field\", \"details\":[ ] &#125; ] &#125; ] &#125; ] &#125; ] &#125;&#125;","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://willky.github.io/tags/elasticsearch/"},{"name":"es","slug":"es","permalink":"https://willky.github.io/tags/es/"},{"name":"score","slug":"score","permalink":"https://willky.github.io/tags/score/"}]},{"title":"ES查询返回total为10000","date":"2020-07-26T16:06:55.000Z","path":"2020/07/27/ES查询返回total为10000/","text":"elasticsearch 7.0 默认搜索的时候返回命中总条数为10000, 当我们做业务的时候可能需要用这个数据去做导出或者分页总数据时，这个数据会给我们带来一些困扰。如果需要返回所有命中条数，需要添加一个参数1\"track_total_hits\" : true 完整的语法如下:123456789GET you_index/_search&#123; \"track_total_hits\": true, \"query\": &#123; \"match\" : &#123; \"message\" : \"Elasticsearch\" &#125; &#125;&#125; 如果设置了 track_total_hits 为true， 也意味放放弃一部份性能问题。官方解释如下: Track total hitsGenerally the total hit count can’t be computed accurately without visiting all matches, which is costly for queries that match lots of documents. The track_total_hits parameter allows you to control how the total number of hits should be tracked. Given that it is often enough to have a lower bound of the number of hits, such as “there are at least 10000 hits”, the default is set to 10,000. This means that requests will count the total hit accurately up to 10,000 hits. It’s is a good trade off to speed up searches if you don’t need the accurate number of hits after a certain threshold. When set to true the search response will always track the number of hits that match the query accurately (e.g. total.relation will always be equal to “eq” when track_total_hits is set to true). Otherwise the “total.relation” returned in the “total” object in the search response determines how the “total.value” should be interpreted. A value of “gte” means that the “total.value” is a lower bound of the total hits that match the query and a value of “eq” indicates that “total.value” is the accurate count.","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://willky.github.io/tags/elasticsearch/"},{"name":"track_total_hits","slug":"track-total-hits","permalink":"https://willky.github.io/tags/track-total-hits/"}]},{"title":"laravel中使用redis哨兵模式","date":"2019-05-08T10:37:46.000Z","path":"2019/05/08/laravel中使用redis哨兵模式/","text":"环境博主使用的laravel 版本是 5.6, 所有以下代码可以使用在laravel 5.6 版本中，其他版本应该也可以使用，未经过测试 代码配置修改database.php 配置文件 1234567891011121314151617181920212223$redis = [ &apos;tcp://192.168.1.207:26379&apos; &apos;tcp://192.168.1.225:26381&apos; &apos;tcp://192.168.1.209:26380&apos; &apos;options&apos; =&gt; [ &apos;replication&apos; =&gt; &apos;sentinel&apos;, &apos;service&apos; =&gt; env(&apos;REDIS_SENTINEL_SERVICE&apos;, &apos;mymaster&apos;), //sentinel &apos;parameters&apos; =&gt; [ &apos;password&apos; =&gt; null, &apos;database&apos; =&gt; 0, ], ], ];&apos;redis&apos; =&gt; [ &apos;options&apos; =&gt; [ &apos;prefix&apos; =&gt; &apos;laravel&apos;, ], &apos;client&apos; =&gt; &apos;predis&apos;, &apos;default&apos; =&gt; $redis, &apos;queue&apos; =&gt; $redis ] ],","tags":[{"name":"laravel","slug":"laravel","permalink":"https://willky.github.io/tags/laravel/"},{"name":"redis","slug":"redis","permalink":"https://willky.github.io/tags/redis/"},{"name":"集群","slug":"集群","permalink":"https://willky.github.io/tags/集群/"}]},{"title":"laravel中使用swoole加速你的应用","date":"2019-03-08T04:47:46.000Z","path":"2019/03/08/laravel-swoole/","text":"环境 博主使用的laravel 版本是 5.6, 所有以下代码可以使用在laravel 5.6 版本中，其他版本应该也可以使用，未经过测试 php 7.2 swoole 4.0 + 安装插件先使用composer 把我们需要使用的插件库导进来1composer require swooletw/laravel-swoole 修改配置文件打开app.php 配置文件，把1SwooleTW\\Http\\LaravelServiceProvider::class, 添加到 providers 中 生成swoole 配置文件1php artisan vendor:publish --tag=laravel-swoole 执行完命令后，我们看到config 文件夹下多了两个文件，如果我们没有使用socket的话，只需要修改swoole-http.php 文件即可. 具体需要修改哪个配置可根据自己的服务器配置去调整 启动服务，测试执行1php artisan swoole:http start 此处可以看到控制台把服务器给启动了，把链接复制到浏览器即可使用 swoole 服务命令12345php artisan swoole:http start //开启http服务php artisan swoole:http stop //停止php artisan swoole:http restart //重新启动php artisan swoole:http reload //热重载，好像并没有什么卵用，测试发现并不是所有的代码都能热重载的php artisan swoole:http infos //运行信息","tags":[{"name":"laravel","slug":"laravel","permalink":"https://willky.github.io/tags/laravel/"},{"name":"redis","slug":"redis","permalink":"https://willky.github.io/tags/redis/"},{"name":"集群","slug":"集群","permalink":"https://willky.github.io/tags/集群/"}]},{"title":"关于我","date":"2014-03-01T10:07:47.000Z","path":"2014/03/01/about/","text":"技术领域 PHP java Elastic Search","tags":[{"name":"手哥","slug":"手哥","permalink":"https://willky.github.io/tags/手哥/"}]}]